name: Frontend CI/CD

on:
  pull_request:
    branches: [main]              # Run on any PR vs main
    paths:
      - 'frontend-app/**'
      - 'app.py'
      - 'requirements.txt'
      - '.github/workflows/frontend.yml'
  push:
    branches: [main]              # Also run on direct push to main
    paths:
      - 'frontend-app/**'
      - 'app.py'
      - 'requirements.txt'
      - '.github/workflows/frontend.yml'
  workflow_dispatch:              # Manual trigger with version input
    inputs:
      version:
        description: 'Image version'
        required: true

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4           # Fetch repository

      - name: Set up Python
        uses: actions/setup-python@v4       # Install Python
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pytest pytest-flask  # Bring in Flask + test libraries

      - name: Run frontend tests
        working-directory: frontend-app
        run: pytest                                        # Execute all test_app.py

  push_to_docker_hub:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine image tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v2          # Authenticate to Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app:$TAG ./frontend-app
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app:$TAG  # Tag & upload

  deploy:
    needs: push_to_docker_hub
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Trigger DO App deployment
        run: doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }}
